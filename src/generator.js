// src/generator.js
import RSS from 'rss';
import fs from 'fs/promises';
import { readFileSync } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const configPath = path.join(__dirname, '..', 'config.json');

const config = JSON.parse(readFileSync(configPath, 'utf8'));

const CSS = `
  body {
    margin: 0;
    padding: 20px;
    background-color: #f8f8f8;
    font-family: system-ui, -apple-system, sans-serif;
  }

  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)' opacity='0.08'/%3E%3C/svg%3E");
    opacity: 0.4;
    pointer-events: none;
  }

  .corner-fold {
    position: absolute;
    top: 0;
    right: 0;
    width: 40px;
    height: 40px;
    background: linear-gradient(225deg, transparent 50%, rgba(0,0,0,0.05) 50%);
  }

  .title {
    font-family: "ITC Garamond Light", Georgia, serif;
    font-size: 3.5em;
    line-height: 1;
    letter-spacing: -0.02em;
    font-weight: 300;
    text-align: center;
    color: #1a1a1a;
    margin-bottom: 0.1em;
  }

  .divider {
    text-align: center;
    height: 20px;
    margin: 20px 0;
    position: relative;
    border: none;
  }

  .divider::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 20%;
    right: 20%;
    height: 1px;
    background: linear-gradient(to right, 
      transparent, 
      #ddd 10%, 
      #ddd 45%, 
      transparent 50%,
      #ddd 55%,
      #ddd 90%,
      transparent
    );
  }

  .divider::after {
    content: "‚òï";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #f8f8f8;
    padding: 0 20px;
    color: #666;
    font-size: 0.9em;
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    padding: 20px;
  }

  .grid-item {
    background: white;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  .image-container {
    position: relative;
    padding-top: 75%;
    overflow: hidden;
  }

  .image-container img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .content {
    padding: 12px;
  }

  .content h3 {
    margin: 0 0 4px 0;
    font-size: 16px;
  }

  .content p {
    margin: 0;
    font-size: 14px;
    color: #666;
  }

  .footer {
    text-align: center;
    font-family: Georgia, serif;
    color: #666;
    margin-top: 20px;
  }
`;

async function generateFeed(feedConfig) {
  const { id, title, description, boardId } = feedConfig;
  
  try {
    const dataPath = path.join(__dirname, '..', 'data', `${id}.json`);
    const data = await fs.readFile(dataPath, 'utf-8');
    const pins = JSON.parse(data);

    const feed = new RSS({
      title: title || 'Pinterest Feed',
      description: description || 'Pinterest Board Feed',
      feed_url: `https://shorobor-field.github.io/snout/feeds/${id}.xml`,
      site_url: "https://pinterest.com",
      pubDate: new Date()
    });

    const feedHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>${CSS}</style>
      </head>
      <body>
        <div class="corner-fold"></div>
        
        <h1 class="title">Snout Digest</h1>
        <h2 style="text-align: center; font-family: Georgia, serif;">${title}</h2>
        
        <hr class="divider">
        
        <div class="grid">
          ${pins.map(pin => `
            <div class="grid-item">
              <div class="image-container">
                <img src="${pin.image}" alt="${pin.title}">
              </div>
              <div class="content">
                <h3>${pin.title}</h3>
                ${pin.description ? `<p>${pin.description}</p>` : ''}
                <a href="${pin.url}" style="display: inline-block; margin-top: 8px; color: #666; text-decoration: none;">View on Pinterest ‚Üí</a>
              </div>
            </div>
          `).join('')}
        </div>
        
        <hr class="divider">
        
        <div class="footer">
          Generated by Snout üêï
        </div>
      </body>
      </html>
    `;

    feed.item({
      title: `${title} - Latest Pins`,
      description: feedHtml,
      url: `https://pinterest.com/board/${boardId}`,
      guid: `${id}-${Date.now()}`,
      date: new Date()
    });

    const publicPath = path.join(__dirname, '..', 'public');
    const feedsPath = path.join(publicPath, 'feeds');
    await fs.mkdir(feedsPath, { recursive: true });
    
    const feedPath = path.join(feedsPath, `${id}.xml`);
    await fs.writeFile(feedPath, feed.xml({indent: true}));
    console.log(`‚ú® generated feed at: ${feedPath}`);

  } catch (error) {
    console.error(`üíÄ failed generating ${id}:`, error);
  }
}

async function generateAllFeeds() {
  console.log('üì° generating all feeds...');
  
  for (const feed of config.feeds) {
    await generateFeed(feed);
  }
  
  // Create index page with same styling
  const indexHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>${CSS}</style>
    </head>
    <body>
      <div class="corner-fold"></div>
      
      <h1 class="title">üêï snout</h1>
      <h2 style="text-align: center; font-family: Georgia, serif;">Pinterest RSS feeds</h2>
      
      <hr class="divider">
      
      <div class="grid">
        ${config.feeds.map(feed => `
          <div class="grid-item">
            <div class="content">
              <h3>${feed.title}</h3>
              ${feed.description ? `<p>${feed.description}</p>` : ''}
              <a href="./feeds/${feed.id}.xml" style="display: inline-block; margin-top: 8px; color: #666; text-decoration: none;">
                Subscribe to RSS feed ‚Üí
              </a>
            </div>
          </div>
        `).join('')}
      </div>

      <hr class="divider">
      
      <div class="footer">
        Last updated: ${new Date().toLocaleString()}
      </div>
    </body>
    </html>
  `;

  const publicPath = path.join(__dirname, '..', 'public');
  await fs.mkdir(publicPath, { recursive: true });
  await fs.writeFile(path.join(publicPath, 'index.html'), indexHtml);
  
  console.log('‚ú® all feeds generated!');
}

generateAllFeeds();